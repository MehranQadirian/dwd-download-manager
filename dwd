#!/usr/bin/env python3
import subprocess
import os
import time
import sys
import urllib.parse
import requests
import argparse
from concurrent.futures import ThreadPoolExecutor
from rich.console import Console
from rich.progress import Progress, BarColumn, TextColumn, TimeRemainingColumn, TransferSpeedColumn
from rich.panel import Panel
from rich.text import Text
from rich.prompt import Prompt
import logging
import re
import datetime
import json

# تنظیم لاگ
logging.basicConfig(filename='download.log', level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

console = Console()

def get_filename_from_url(url, is_youtube=False):
    """استخراج نام فایل از لینک یا yt-dlp"""
    if is_youtube:
        try:
            result = subprocess.run(['yt-dlp', '--get-filename', '-f', 'best', url], capture_output=True, text=True)
            filename = result.stdout.strip() or "youtube_download.mp4"
            return urllib.parse.unquote(filename)
        except:
            return "youtube_download.mp4"
    parsed = urllib.parse.urlparse(url)
    filename = os.path.basename(parsed.path)
    return urllib.parse.unquote(filename) if filename else "downloaded_file"

def get_file_size(url, is_youtube=False):
    """دریافت اندازه فایل از سرور یا yt-dlp"""
    if is_youtube:
        return None, 'video/mp4'
    try:
        response = requests.head(url, allow_redirects=True, timeout=10)
        size = int(response.headers.get('content-length', 0))
        content_type = response.headers.get('content-type', 'unknown')
        return size if size > 0 else None, content_type
    except Exception as e:
        console.print(f"[red]Warning: Could not get file size: {e}[/red]")
        return None, 'unknown'

def get_youtube_info(url):
    """دریافت اطلاعات ویدیوی یوتیوب"""
    try:
        result = subprocess.run(['yt-dlp', '--dump-json', url], capture_output=True, text=True)
        info = json.loads(result.stdout)
        return {
            'title': info.get('title', 'Unknown'),
            'duration': info.get('duration', 0),
            'formats': [(f.get('format_id'), f.get('ext'), f.get('resolution', 'Unknown')) for f in info.get('formats', [])]
        }
    except Exception as e:
        console.print(f"[red]Error getting YouTube info: {e}[/red]")
        return None

def is_youtube_url(url):
    """تشخیص لینک یوتیوب"""
    youtube_regex = r'(https?://)?(www\.)?(youtube|youtu\.be)\.'
    return bool(re.search(youtube_regex, url))

def play_completion_sound():
    """پخش صدا هنگام اتمام دانلود"""
    try:
        subprocess.run(['mpg123', '/usr/share/sounds/freedesktop/stereo/complete.oga'], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except:
        console.print("[yellow]Warning: Could not play completion sound. Install mpg123 or check sound file.[/yellow]")

def send_notification(filename, output_path):
    """ارسال نوتیفیکیشن دسکتاپ"""
    try:
        subprocess.run(['notify-send', 'DWD: Download Completed', f'{filename} saved to {output_path}'], check=True)
    except:
        console.print("[yellow]Warning: Could not send notification. Install libnotify-bin.[/yellow]")

def download_file(url, output_dir, proxy=None, youtube=False, play_sound=False, quality='best'):
    """دانلود فایل با wget یا yt-dlp و نمایش Progress Bar"""
    is_youtube = youtube or is_youtube_url(url)
    filename = get_filename_from_url(url, is_youtube)
    output_path = os.path.join(os.path.expanduser(output_dir), filename)
    
    console.print(Panel(f"[bold cyan]Starting download: {url}[/bold cyan]", title="Download Info"))
    
    # نمایش اطلاعات ویدیوی یوتیوب
    if is_youtube:
        info = get_youtube_info(url)
        if info:
            console.print(f"[green]Title: {info['title']}[/green]")
            console.print(f"[green]Duration: {datetime.timedelta(seconds=info['duration'])}[/green]")
            console.print("[green]Available formats:[/green]")
            for fmt_id, ext, res in info['formats']:
                console.print(f"  [cyan]{fmt_id}: {res} ({ext})[/cyan]")
            if quality == 'best':
                console.print("[yellow]Using best quality. Use --quality to specify format.[/yellow]")
            else:
                console.print(f"[yellow]Selected quality: {quality}[/yellow]")
    
    total_size, content_type = get_file_size(url, is_youtube)
    if total_size:
        console.print(f"[green]File size: {total_size:,} bytes | Type: {content_type}[/green]")
    else:
        console.print("[yellow]Warning: File size unknown, progress bar may be inaccurate.[/yellow]")
    
    # تنظیم دستور دانلود
    if is_youtube:
        cmd = ['yt-dlp', url, '-o', output_path, '-f', quality]
        if proxy:
            cmd.extend(['--proxy', proxy])
    else:
        cmd = ['wget', url, '-O', output_path, '--show-progress', '-c']
        if proxy:
            cmd.extend(['--proxy', proxy])
    
    # زمان شروع برای محاسبه سرعت متوسط
    start_time = time.time()
    
    # اجرای دستور
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    
    # Progress Bar با rich
    with Progress(
        TextColumn("[progress.description]{task.description}"),
        BarColumn(bar_width=50),
        "[progress.percentage]{task.percentage:>3.1f}%",
        "•",
        TransferSpeedColumn(),
        "•",
        TimeRemainingColumn(),
        console=console
    ) as progress:
        task = progress.add_task(f"[cyan]{filename}", total=total_size)
        
        while not os.path.exists(output_path):
            time.sleep(0.5)
            if process.poll() is not None:
                stdout, stderr = process.communicate()
                console.print(f"[red]Error: {stderr}[/red]")
                console.print("[red]Possible reasons: Network issue, invalid URL, or yt-dlp needs update. Try with --proxy.[/red]")
                logging.error(f"Failed to download {url}: {stderr}")
                return False
        
        while process.poll() is None:
            if os.path.exists(output_path):
                current_size = os.path.getsize(output_path)
                if total_size:
                    progress.update(task, completed=current_size)
                else:
                    progress.update(task, description=f"[cyan]{filename} ({current_size:,} bytes)")
            time.sleep(0.5)
        
        # به‌روزرسانی نهایی Progress Bar
        if os.path.exists(output_path):
            final_size = os.path.getsize(output_path)
            if total_size:
                progress.update(task, completed=final_size, total=final_size)
            else:
                progress.update(task, description=f"[cyan]{filename} ({final_size:,} bytes)")
        
        stdout, stderr = process.communicate()
        if process.returncode != 0:
            console.print(f"[red]Error: {stderr}[/red]")
            console.print("[red]Possible reasons: Network issue, invalid URL, or yt-dlp needs update. Try with --proxy.[/red]")
            logging.error(f"Failed to download {url}: {stderr}")
            return False
    
    # محاسبه سرعت متوسط
    elapsed_time = time.time() - start_time
    final_size = os.path.getsize(output_path) if os.path.exists(output_path) else 0
    avg_speed = final_size / elapsed_time / 1024 if elapsed_time > 0 else 0  # KB/s
    
    # نمایش پیام نهایی
    console.print(Panel(
        Text(f"Download completed: {filename}\n"
             f"Size: {final_size:,} bytes\n"
             f"Path: {output_path}\n"
             f"Average Speed: {avg_speed:.2f} KB/s\n"
             f"Time Taken: {datetime.timedelta(seconds=int(elapsed_time))}",
             style="bold green"),
        title="Success"
    ))
    logging.info(f"Downloaded {url} to {output_path} ({final_size:,} bytes, avg speed: {avg_speed:.2f} KB/s)")
    
    # پخش صدا و نوتیفیکیشن
    if play_sound:
        play_completion_sound()
    send_notification(filename, output_path)
    
    return True

def main():
    parser = argparse.ArgumentParser(description="🚀 DWD: The Ultimate Download Manager 🚀")
    parser.add_argument('urls', nargs='+', help="One or more URLs to download")
    parser.add_argument('--output-dir', '-o', default='~/Downloads', help="Directory to save downloaded files")
    parser.add_argument('--proxy', '-p', help="Proxy server (e.g., http://proxy:port or socks5://proxy:port)")
    parser.add_argument('--threads', '-t', type=int, default=3, help="Number of parallel downloads")
    parser.add_argument('--youtube', '-y', action='store_true', help="Force YouTube download mode with yt-dlp")
    parser.add_argument('--sound', '-s', action='store_true', help="Play a sound when download completes")
    parser.add_argument('--quality', '-q', default='best', help="YouTube video quality (e.g., best, 720p, 1080p, or format ID)")
    
    args = parser.parse_args()
    
    console.print(Panel("[bold magenta]Welcome to DWD: The Ultimate Download Manager![/bold magenta]", title="DWD"))
    
    # دانلود فایل‌ها به صورت موازی
    with ThreadPoolExecutor(max_workers=args.threads) as executor:
        futures = [executor.submit(download_file, url, args.output_dir, args.proxy, args.youtube, args.sound, args.quality) for url in args.urls]
        for future in futures:
            future.result()
    
    console.print("[bold green]All downloads completed![/bold green]")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        console.print("[yellow]Download interrupted by user.[/yellow]")
        logging.warning("Download interrupted by user")
        sys.exit(1)
    except Exception as e:
        console.print(f"[red]Unexpected error: {e}[/red]")
        logging.error(f"Unexpected error: {e}")
        sys.exit(1)
